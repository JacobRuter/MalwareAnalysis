import argparse
import struct
#Constants
elfanewoffset = 60
imagebaseoffset = 52
sectionoffset = 248

#Parser to collect information from the user 
parser = argparse.ArgumentParser(description="Converts a virtual address to a file pointer")
parser.add_argument(
    'path',
    type=str,
)
parser.add_argument(
    'address',
    type=str,
)
args = parser.parse_args()
pathentered=args.path
addressentered=args.address

print("You Entered: {0} {1}".format(pathentered, addressentered))
# if virtualaddress = 
#     print (" -> ")
# if virtualaddress =
#     print (" -> ")
addressentered = int(addressentered,16)

with open(pathentered, "rb") as pe:

    #This moves and finds the elfanew
    pe.seek(elfanewoffset,0)
    #print (pe.read(4))
    (elfanew_ptr,) = struct.unpack("<l", pe.read(4))
    #print(elfanew_ptr)

    #This moves and finds the number of NumberOfSections
    pe.seek(elfanew_ptr+6,0)
    (sections,) = struct.unpack("<H", pe.read(2))
    #print(sections)

    #This moves and finds the imagebase
    pe.seek(elfanew_ptr+imagebaseoffset,0)
    (imagebase,) = struct.unpack("<l", pe.read(4))
    #print (imagebase)

    pe.seek(elfanew_ptr+sectionoffset,)
    #print (pe.read(8))

    for i in range (sections):
        pe.seek(8,1)
        (virtualsize,) = struct.unpack("<l",pe.read(4))
        (virtualbase,) = struct.unpack("<l",pe.read(4))
        virtualbase += imagebase
        virtualend = virtualsize+virtualbase
        if addressentered >= virtualbase and addressentered <= virtualend:
            #print ("Section Found")
            targetoffset=addressentered-virtualbase
            pe.seek(4,1)
            (physicaladdresssec,) = struct.unpack("<l",pe.read(4))
            targetphysicaladdress=physicaladdresssec+targetoffset
            print ("{} -> {}".format(hex(addressentered),hex(targetphysicaladdress)))
            break

        elif i != sections-1:
            pe.seek(24,1)

        else:
            print ("{} -> ??".format(hex(addressentered)))

        
        

        




